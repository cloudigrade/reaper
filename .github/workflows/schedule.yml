name: Schedule

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/reaper
  AWS_DEFAULT_REGION: us-east-1

on:
  schedule:
    - cron: '0 20 * * *'
    - cron: '30 * * * *'

jobs:
  test-docker:
    name: Docker Build
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    env:
      GHCR_BOT_USERNAME: ${{ secrets.GHCR_BOT_USERNAME }}
      GHCR_BOT_TOKEN: ${{ secrets.GHCR_BOT_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - run: echo "${GHCR_BOT_TOKEN}" | docker login ghcr.io -u ${GHCR_BOT_USERNAME} --password-stdin
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from $IMAGE_NAME:latest .

  deploy-build-and-push-image:
    name: Build and Push Image
    if: github.ref == 'refs/heads/master'
    needs: [test-docker]
    runs-on: ubuntu-latest
    container:
      image: docker:latest
    env:
      GHCR_BOT_USERNAME: ${{ secrets.GHCR_BOT_USERNAME }}
      GHCR_BOT_TOKEN: ${{ secrets.GHCR_BOT_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - run: echo "${GHCR_BOT_TOKEN}" | docker login ghcr.io -u ${GHCR_BOT_USERNAME} --password-stdin
      - run: docker pull $IMAGE_NAME:latest || true
      - run: docker build --cache-from ${IMAGE_NAME}:latest --tag ${IMAGE_NAME}:${{ github.sha }} --tag ${IMAGE_NAME}:latest .
      - run: docker push ${IMAGE_NAME}:${{ github.sha }}
      - run: docker push ${IMAGE_NAME}:latest

  reap-dev:
    strategy:
      fail-fast: false
      matrix:
        account: [{id: DEV01_ID, key: DEV01_KEY}, {id: DEV02_ID, key: DEV02_KEY}, {id: DEV03_ID, key: DEV03_KEY}, {id: DEV04_ID, key: DEV04_KEY}, {id: DEV05_ID, key: DEV05_KEY}, {id: DEV06_ID, key: DEV06_KEY}, {id: DEV07_ID, key: DEV07_KEY}, {id: DEV08_ID, key: DEV08_KEY}, {id: DEV09_ID, key: DEV09_KEY}, {id: DEV10_ID, key: DEV10_KEY}, {id: DEV11_ID, key: DEV11_KEY}]
    name: reap dev
    if: github.event.schedule != '30 * * * *'
    needs: [deploy-build-and-push-image]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/reaper:latest
      credentials:
        username: ${{ secrets.GHCR_BOT_USERNAME }}
        password: ${{ secrets.GHCR_BOT_TOKEN }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets[matrix.account.id] }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets[matrix.account.key] }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    steps:
      - run: |
          cd /opt/reaper
          export AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
          export REAP_AGE_SNAPSHOTS REAP_AGE_VOLUMES REAP_DRYRUN REAP_BYPASS_TAG WEBHOOK_URL
          sh ./scale-down-cluster-dev.sh
          poetry run python ./reaper_delete.py

  reap-ecs:
    strategy:
      fail-fast: false
      matrix:
        account: [{id: CUSTOMER_ID, key: CUSTOMER_KEY}, {id: PROD_ID, key: PROD_KEY}, {id: STAGE_ID, key: STAGE_KEY}]
    name: reap ecs
    if: github.event.schedule != '0 20 * * *'
    needs: [deploy-build-and-push-image]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/cloudigrade/reaper:latest
      credentials:
        username: ${{ secrets.GHCR_BOT_USERNAME }}
        password: ${{ secrets.GHCR_BOT_TOKEN }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets[matrix.account.id] }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets[matrix.account.key] }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
    steps:
      - run: |
          cd /opt/reaper
          export AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ECS_CLUSTER_NAME
          export REAP_AGE_SNAPSHOTS REAP_AGE_VOLUMES REAP_DRYRUN REAP_BYPASS_TAG WEBHOOK_URL
          poetry run python ./reaper_delete.py

