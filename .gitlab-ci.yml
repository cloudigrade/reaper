stages:
  - test
  - deploy
  - reap

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:
  AWS_DEFAULT_REGION: us-east-1
  CONTAINER_IMAGE: registry.gitlab.com/${CI_PROJECT_PATH}
  DOCKER_DRIVER: overlay2

Test Build:
  image: docker:stable
  services:
    - docker:dind
  stage: test
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - docker pull ${CONTAINER_IMAGE}:latest || true
    - docker build --cache-from ${CONTAINER_IMAGE}:latest .

Test Code:
  stage: test
  image: registry.gitlab.com/cloudigrade/images/build-container:latest
  rules:
    - when: on_success
  before_script:
    - pip install tox poetry
  script: tox

Deploy Image:
  image: docker:stable
  services:
    - docker:dind
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - docker pull ${CONTAINER_IMAGE}:latest || true
    - docker build --cache-from ${CONTAINER_IMAGE}:latest --tag ${CONTAINER_IMAGE}:${CI_BUILD_REF} --tag ${CONTAINER_IMAGE}:latest .
    - docker push ${CONTAINER_IMAGE}:${CI_BUILD_REF}
    - docker push ${CONTAINER_IMAGE}:latest

.ECSReaper: &ecs_reaper_definition
  image: ${CONTAINER_IMAGE}:latest
  stage: reap
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web"
      when: never
    - if: $ECS == "true"
      when: on_success
  before_script:
    - cd /opt/reaper/
    - export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY ECS_CLUSTER_NAME
    - export REAP_AGE_SNAPSHOTS REAP_AGE_VOLUMES REAP_DRYRUN REAP_BYPASS_TAG
  script:
    - sh ./scale-down-cluster.sh
    - poetry run python ./reaper_delete.py

.Reaper: &reaper_definition
  image: ${CONTAINER_IMAGE}:latest
  stage: reap
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web"
      when: never
    - if: $NIGHTLY == "true"
      when: on_success
  before_script:
    - cd /opt/reaper/
    - export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
    - export REAP_AGE_SNAPSHOTS REAP_AGE_VOLUMES REAP_DRYRUN REAP_BYPASS_TAG
  script:
    - sh ./scale-down-cluster-dev.sh
    - poetry run python ./reaper_delete.py

Reap ECS CI:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${CI_ID}
    AWS_SECRET_ACCESS_KEY: ${CI_KEY}
    ECS_CLUSTER_NAME: ${CI_ECS_CLUSTER}

Reap ECS Test:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${TEST_ID}
    AWS_SECRET_ACCESS_KEY: ${TEST_KEY}
    ECS_CLUSTER_NAME: ${TEST_ECS_CLUSTER}

Reap ECS Stage:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${STAGE_ID}
    AWS_SECRET_ACCESS_KEY: ${STAGE_KEY}
    ECS_CLUSTER_NAME: ${STAGE_ECS_CLUSTER}

Reap ECS Prod:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${PROD_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_KEY}
    ECS_CLUSTER_NAME: ${PROD_ECS_CLUSTER}

Reap Customer:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${CUSTOMER_ID}
    AWS_SECRET_ACCESS_KEY: ${CUSTOMER_KEY}

Reap DEV01:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV01_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV01_KEY}

Reap DEV02:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV02_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV02_KEY}

Reap DEV03:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV03_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV03_KEY}

Reap DEV04:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV04_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV04_KEY}

Reap DEV05:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV05_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV05_KEY}

Reap DEV06:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV06_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV06_KEY}

Reap DEV07:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV07_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV07_KEY}

Reap DEV08:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV08_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV08_KEY}

Reap DEV09:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV09_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV09_KEY}

Reap DEV10:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV10_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV10_KEY}

Reap DEV11:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV11_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV11_KEY}

Reap QE01:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${QE01_ID}
    AWS_SECRET_ACCESS_KEY: ${QE01_KEY}

Reap QE02:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${QE02_ID}
    AWS_SECRET_ACCESS_KEY: ${QE02_KEY}

Reap QE03:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${QE03_ID}
    AWS_SECRET_ACCESS_KEY: ${QE03_KEY}
