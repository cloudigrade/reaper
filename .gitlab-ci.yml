stages:
  - test
  - deploy
  - reap

variables:
  AWS_DEFAULT_REGION: us-east-1
  CONTAINER_IMAGE: registry.gitlab.com/${CI_PROJECT_PATH}
  DOCKER_DRIVER: overlay2

Test Build:
  image: docker:stable
  services:
    - docker:dind
  stage: test
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - docker pull ${CONTAINER_IMAGE}:latest || true
    - docker build --cache-from ${CONTAINER_IMAGE}:latest .

Deploy Image:
  image: docker:stable
  services:
    - docker:dind
  stage: deploy
  only:
    - master
  before_script:
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} registry.gitlab.com
  script:
    - docker pull ${CONTAINER_IMAGE}:latest || true
    - docker build --cache-from ${CONTAINER_IMAGE}:latest --tag ${CONTAINER_IMAGE}:${CI_BUILD_REF} --tag ${CONTAINER_IMAGE}:latest .
    - docker push ${CONTAINER_IMAGE}:${CI_BUILD_REF}
    - docker push ${CONTAINER_IMAGE}:latest

.ECSReaper: &ecs_reaper_definition
  image: ${CONTAINER_IMAGE}:latest
  stage: reap
  only:
    refs:
      - schedules
      - web
    variables:
      - $ECS == "true"
  script:
    - |
        if [[ `aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${ECS_CLUSTER_NAME}" --query "AutoScalingGroups[*].DesiredCapacity" --output text` -ne 0 ]]; then
            echo "ECS Cluster ${ECS_CLUSTER_NAME} scaled up, checking age.";
            export ECS_INSTANCE_ID=`aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${ECS_CLUSTER_NAME}" --query "AutoScalingGroups[*].Instances[0].InstanceId" --output text`
            export ECS_INSTANCE_AGE=`aws ec2 describe-instances --instance-id "${ECS_INSTANCE_ID}" --query "Reservations[0].Instances[0].LaunchTime" --output text`
            echo "ECS Cluster ${ECS_CLUSTER_NAME} started at ${ECS_INSTANCE_AGE}"
            if [[ `date -d "${ECS_INSTANCE_AGE}" -u +%s` -lt `date -d -30minutes -u +%s` ]]; then
                echo "ECS Cluster ${ECS_CLUSTER_NAME} up for more than 30 minutes, scaling down.";
                aws autoscaling update-auto-scaling-group --auto-scaling-group-name="${ECS_CLUSTER_NAME}" --min-size 0 --max-size 0 --desired-capacity 0 --region ${ECS_REGION};
                curl -X POST -H 'Content-type: application/json' --data '{"text":"ECS Cluster '"${ECS_CLUSTER_NAME}"' up for more than 30 minutes, scaling down instance '"${ECS_INSTANCE_ID}"'."}' ${WEBHOOK_URL}
            else
                echo "ECS Cluster ${ECS_CLUSTER_NAME} up for less than 30 minutes, exiting."
            fi;
        else
            echo "ECS Cluster ${ECS_CLUSTER_NAME} is scaled down, exiting.";
        fi;


.Reaper: &reaper_definition
  image: ${CONTAINER_IMAGE}:latest
  stage: reap
  only:
    refs:
      - schedules
      - web
    variables:
      - $NIGHTLY == "true"
  script:
    - for region in `aws ec2 describe-regions --query "Regions[*].RegionName" --output text`;do echo "Checking $region";for name in `aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[*].AutoScalingGroupName" --output text --region $region`;do echo "Verifying that '$name' in '$region' is scaled down";aws autoscaling update-auto-scaling-group --auto-scaling-group-name="$name" --min-size 0 --max-size 0 --desired-capacity 0 --region $region;done;for instanceid in `aws ec2 describe-instances --filters "Name=instance-state-code,Values=16" --query "Reservations[*].Instances[*].InstanceId" --output text --region $region`; do echo "Stopping '$instanceid' in '$region'";aws ec2 stop-instances --instance-ids $instanceid --region $region;done;done;

Reap ECS CI:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${CI_ID}
    AWS_SECRET_ACCESS_KEY: ${CI_KEY}
    ECS_CLUSTER_NAME: ${CI_ECS_CLUSTER}

Reap ECS Test:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${TEST_ID}
    AWS_SECRET_ACCESS_KEY: ${TEST_KEY}
    ECS_CLUSTER_NAME: ${TEST_ECS_CLUSTER}

Reap ECS Stage:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${STAGE_ID}
    AWS_SECRET_ACCESS_KEY: ${STAGE_KEY}
    ECS_CLUSTER_NAME: ${STAGE_ECS_CLUSTER}

Reap ECS Prod:
  <<: *ecs_reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${PROD_ID}
    AWS_SECRET_ACCESS_KEY: ${PROD_KEY}
    ECS_CLUSTER_NAME: ${PROD_ECS_CLUSTER}

Reap Customer:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${CUSTOMER_ID}
    AWS_SECRET_ACCESS_KEY: ${CUSTOMER_KEY}

Reap DEV01:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV01_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV01_KEY}

Reap DEV02:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV02_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV02_KEY}

Reap DEV03:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV03_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV03_KEY}

Reap DEV04:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV04_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV04_KEY}

Reap DEV06:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV06_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV06_KEY}

Reap DEV07:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV07_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV07_KEY}

Reap DEV08:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV08_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV08_KEY}

Reap DEV09:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV09_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV09_KEY}

Reap DEV10:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV10_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV10_KEY}

Reap DEV11:
  <<: *reaper_definition
  variables:
    AWS_ACCESS_KEY_ID: ${DEV11_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV11_KEY}
